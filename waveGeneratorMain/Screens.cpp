#include "Screens.h"

Adafruit_SSD1306 display(SCREEN_WIDTH, SCREEN_HEIGHT, &Wire, OLED_RESET);

const unsigned char waveSquarebitmap [] PROGMEM = {
	0xff, 0xc0, 0x00, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 
	0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 
	0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 
	0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 
	0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 
	0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 
	0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0x80, 0x1f, 0xff, 0x7f, 0xfe, 0x00, 0xff, 0xff, 0xff, 0x7f, 
	0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 
	0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 
	0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 
	0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfe, 0xff, 0xff, 0xff, 0xff, 0x00, 
	0x00, 0xff
};
// 'sinebitmap', 48x35px
const unsigned char wavesinebitmap [] PROGMEM = {
	0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x0f, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0xf9, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xf7, 
	0xf9, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xef, 0xfc, 0xff, 0xff, 0xff, 
	0xff, 0xef, 0xfc, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0xff, 
	0xff, 0xff, 0xff, 0xdf, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xdf, 
	0xfe, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 
	0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xdf, 0xff, 0x7f, 0xff, 0xff, 0x00, 0x3f, 0xff, 0x7f, 
	0xfc, 0x00, 0xff, 0xff, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x7f, 0xfd, 0xff, 0xff, 0xff, 
	0xff, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0x3f, 0xfd, 0xff, 
	0xff, 0xff, 0xff, 0x3f, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xbf, 0xf9, 0xff, 0xff, 0xff, 0xff, 0xbf, 
	0xf9, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfb, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xfb, 0xff, 0xff, 0xff, 
	0xff, 0xdf, 0xf3, 0xff, 0xff, 0xff, 0xff, 0xcf, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xef, 0xe7, 0xff, 
	0xff, 0xff, 0xff, 0xe7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xf8, 
	0x3f, 0xff
};
// 'trianglebitmap', 48x38px
const unsigned char wavetrianglebitmap [] PROGMEM = {
	0xff, 0xff, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x9f, 0xff, 0xff, 0xff, 0xff, 0xff, 0x8f, 0xff, 
	0xff, 0xff, 0xff, 0xff, 0xaf, 0xff, 0xff, 0xff, 0xff, 0xff, 0x6f, 0xff, 0xff, 0xff, 0xff, 0xff, 
	0x77, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x77, 0xff, 0xff, 0xff, 0xff, 0xfe, 0xf7, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfc, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xfb, 0xff, 
	0xff, 0xff, 0xff, 0xfd, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xf9, 0xfd, 0xff, 0xff, 0xff, 0xff, 0xfb, 
	0xfc, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xfe, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xfe, 0xff, 0xff, 0xff, 
	0xff, 0xf7, 0xfe, 0x7f, 0xff, 0xff, 0xff, 0xf7, 0xff, 0x7f, 0xff, 0xff, 0xff, 0xef, 0xff, 0x7f, 
	0xff, 0xff, 0xc0, 0x0f, 0xff, 0x3f, 0xfc, 0x00, 0xff, 0xff, 0xff, 0xbf, 0xfd, 0xff, 0xff, 0xff, 
	0xff, 0xbf, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfb, 0xff, 0xff, 0xff, 0xff, 0xdf, 0xfb, 0xff, 
	0xff, 0xff, 0xff, 0xcf, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xef, 0xf7, 0xff, 0xff, 0xff, 0xff, 0xef, 
	0xe7, 0xff, 0xff, 0xff, 0xff, 0xe7, 0xef, 0xff, 0xff, 0xff, 0xff, 0xf7, 0xef, 0xff, 0xff, 0xff, 
	0xff, 0xf7, 0xcf, 0xff, 0xff, 0xff, 0xff, 0xf3, 0xdf, 0xff, 0xff, 0xff, 0xff, 0xfb, 0xdf, 0xff, 
	0xff, 0xff, 0xff, 0xfb, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xfd, 0xbf, 0xff, 0xff, 0xff, 0xff, 0xfd, 
	0xbf, 0xff, 0xff, 0xff, 0xff, 0xfd, 0x7f, 0xff, 0xff, 0xff, 0xff, 0xfe, 0x7f, 0xff, 0xff, 0xff, 
	0xff, 0xfe, 0x7f, 0xff
};

// Array of all bitmaps for convenience. (Total bytes used to store images in PROGMEM = 736)
const int waveallArray_LEN = 3;
const unsigned char* waveallArray[3] = {
	waveSquarebitmap,
	wavesinebitmap,
	wavetrianglebitmap
};

void displayConfig(void)
{
  if(!display.begin(SSD1306_SWITCHCAPVCC, SCREEN_ADDRESS)) 
  {
      Serial.println("SSD1306 allocation failed");
      for(;;); // Infinity loop 
  }     
  Serial.println("SSD1306 succesfully started"); 
  display.display();
}

void squareWaveScreen(void)
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Square wave selected");

  display.setTextSize(1.8);
  display.setCursor(55,16);
  display.setTextColor(WHITE);
  display.print("V = 10V");


  display.setTextSize(1.8);
  display.setCursor(55,26);
  display.setTextColor(WHITE);
  display.print("f = 100kHz");

  display.setTextSize(1.8);
  display.setCursor(55,36);
  display.setTextColor(WHITE);
  display.print("offset = 10V");

  display.setTextSize(1.8);
  display.setCursor(55,46);
  display.setTextColor(WHITE);
  display.print("duty = 50%");


  display.drawBitmap(1, 19, waveSquarebitmap, 48, 35, 1);
  display.display();
  setSquareWave(60);
  delay(5000);
}

void sineWaveScreen(void)
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Sine wave selected");

  display.setTextSize(1.8);
  display.setCursor(55,16);
  display.setTextColor(WHITE);
  display.print("V = 10V");


  display.setTextSize(1.8);
  display.setCursor(55,26);
  display.setTextColor(WHITE);
  display.print("f = 100kHz");

  display.setTextSize(1.8);
  display.setCursor(55,36);
  display.setTextColor(WHITE);
  display.print("offset = 10V");

  display.drawBitmap(1, 19, wavesinebitmap, 48, 35, 1);
  display.display();
  setSineWave(60);  
  delay(5000);
}

void triangleWaveScreen(void)
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Triangle wave selected");

  display.setTextSize(1.8);
  display.setCursor(55,16);
  display.setTextColor(WHITE);
  display.print("V = 10V");


  display.setTextSize(1.8);
  display.setCursor(55,26);
  display.setTextColor(WHITE);
  display.print("f = 100kHz");

  display.setTextSize(1.8);
  display.setCursor(55,36);
  display.setTextColor(WHITE);
  display.print("offset = 10V");

  display.drawBitmap(1, 19, wavetrianglebitmap, 48, 38, 1);
  display.display();
  setTriangleWave(60);
  delay(5000);
}

void selectWaveScreen(void)
{
  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Select the wave form");

  display.drawBitmap(41, 21, waveSquarebitmap, 48, 35, 1);
  display.display();
  delay(5000); 

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Select the wave form");

  display.drawBitmap(41, 21, wavesinebitmap, 48, 35, 1);
  display.display();
  delay(5000); 

  display.clearDisplay();
  display.setTextSize(1);
  display.setCursor(0,0);
  display.setTextColor(WHITE);
  display.print("Select the wave form");

  display.drawBitmap(41, 21, wavetrianglebitmap, 48, 38, 1);
  display.display();
  delay(5000);  
}

void frequencyAdjust(void)
{
  for (uint8_t i = 0; i <= 10; i++)
  {
    Serial.println("Entrou no ajuste de FrequÃ¢ncia");
    display.clearDisplay();
    display.setTextSize(1);
    display.setCursor(0,0);
    display.setTextColor(WHITE);
    display.print("Adjust Frequency Parameter");

    display.setTextSize(1.8);
    display.setCursor(100,50);
    display.setTextColor(WHITE);

    display.print("Hz");

    display.setTextSize(4);
    display.setCursor(41,21);
    display.setTextColor(WHITE);

    display.print(String(i));  
    display.display();
    delay(1000);
    display.clearDisplay();
  }

}




